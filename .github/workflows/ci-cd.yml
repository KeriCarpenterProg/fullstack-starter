name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Setup test environment
        run: |
          cd server
          cp .env.example .env || echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" > .env
          echo "JWT_SECRET=test_jwt_secret_for_ci_cd_testing_only" >> .env

      - name: Run database migrations
        run: |
          cd server
          npx prisma migrate deploy

      - name: Run backend tests
        run: |
          cd server
          npm test

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      - name: Build frontend
        run: |
          cd client
          npm run build

      # TODO: Add frontend tests when they exist
      # - name: Run frontend tests
      #   run: |
      #     cd client
      #     npm test

  deploy-backend:
    name: Deploy Backend to Railway
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: railwayapp/railway-deploy@v3
        with:
          api_key: ${{ secrets.RAILWAY_API_KEY }}
          project_id: ${{ secrets.RAILWAY_PROJECT_ID }}
          service: backend

  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client